import requests
import json
import os
import socket
import ipaddress

def limpar_tela():
    """Limpa a tela do terminal"""
    os.system('clear' if os.name == 'posix' else 'cls')

def validar_ip(ip):
    """Valida se é IPv4 ou IPv6 válido"""
    try:
        ipaddress.ip_address(ip)
        return True
    except:
        return False

def obter_informacoes_ip(ip):
    """Obtém informações de localização do IP (IPv4 ou IPv6)"""
    try:
        # Tenta API principal primeiro
        url = f"http://ip-api.com/json/{ip}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            dados = response.json()
            if dados.get('status') == 'success':
                dados['ip_type'] = 'IPv6' if ':' in ip else 'IPv4'
                return dados
        
        # Se falhar, tenta API alternativa específica para IPv6
        if ':' in ip:
            return obter_info_ipv6(ip)
        return None
            
    except:
        return None

def obter_info_ipv6(ipv6):
    """Obtém informações de IPv6 usando API alternativa"""
    try:
        url = f"https://ipapi.co/{ipv6}/json/"
        response = requests.get(url, timeout=15)
        
        if response.status_code == 200:
            dados = response.json()
            if not dados.get('error'):
                return {
                    'status': 'success',
                    'query': ipv6,
                    'country': dados.get('country_name'),
                    'countryCode': dados.get('country_code'),
                    'regionName': dados.get('region'),
                    'city': dados.get('city'),
                    'zip': dados.get('postal'),
                    'isp': dados.get('org'),
                    'org': dados.get('org'),
                    'lat': dados.get('latitude'),
                    'lon': dados.get('longitude'),
                    'timezone': dados.get('timezone'),
                    'ip_type': 'IPv6'
                }
        return None
    except:
        return None

def obter_ipv6_publico():
    """Obtém apenas o IPv6 público"""
    try:
        response = requests.get('https://api6.ipify.org', timeout=10)
        return response.text.strip()
    except:
        return None

def exibir_informacoes(dados):
    """Exibe as informações formatadas"""
    if not dados:
        print("❌ Não foi possível obter informações para este IP")
        return
        
    print("═" * 50)
    print("🌍 INFORMAÇÕES DE LOCALIZAÇÃO")
    print("═" * 50)
    print(f"📡 IP: {dados.get('query', 'N/A')}")
    print(f"🔧 Tipo: {dados.get('ip_type', 'N/A')}")
    print(f"🏙️  País: {dados.get('country', 'N/A')}")
    print(f"🏛️  Código do País: {dados.get('countryCode', 'N/A')}")
    print(f"📍 Região: {dados.get('regionName', 'N/A')}")
    print(f"🏢 Cidade: {dados.get('city', 'N/A')}")
    print(f"📮 CEP: {dados.get('zip', 'N/A')}")
    print(f"📡 Provedor: {dados.get('isp', 'N/A')}")
    print(f"🌐 Organização: {dados.get('org', 'N/A')}")
    print(f"🧭 Latitude: {dados.get('lat', 'N/A')}")
    print(f"🧭 Longitude: {dados.get('lon', 'N/A')}")
    print(f"⏰ Fuso Horário: {dados.get('timezone', 'N/A')}")
    print("═" * 50)

def main():
    """Função principal"""
    # Verifica dependências
    try:
        import requests
    except ImportError:
        print("📦 Instalando biblioteca requests...")
        os.system('pip install requests')
        import requests
    
    limpar_tela()
    
    logo = '''

 ▄█████▄   ▄▄▄       ▄▄▄▄▄   ▄▄▄▄▄▄   ▄▄▄       ▄▄▄▄▄  
 ██╔══██╗ ██▀▀█▄   ██▀▀▀▀█▄ ██▀▀▀▀█▄ ██▀▀█▄   ██▀▀▀▀█▄ 
 ██║  ██║ ██   ██  ██     ██ ██     ██ ██   ██  ██     ██ 
 ███▀▀███ ██   ██  ██     ██ ██     ██ ██   ██  ██     ██ 
 ██║  ██║ ██   ██  ██     ██ ██     ██ ██   ██  ██     ██ 
 ██║  ██║ ██▄▄█▀   ██▄▄▄▄█▀ ██▄▄▄▄█▀ ██▄▄█▀   ██▄▄▄▄█▀ 
 ▀▀   ▀▀   ▀▀▀      ▀▀▀▀▀     ▀▀▀▀▀    ▀▀▀      ▀▀▀▀▀ 
 
                By:Gustaa
                Insta: gustavo.rtz
 
                   _______________
 
                    Versão: v2.1
                         🐀 
                   _______________                  
    '''
    
    print(logo)  
    print("=" * 50)
    
    while True:
        print("\nOpções:")
        print("1. Consultar IP específico (IPv4/IPv6)")
        print("2. Consultar meu IPv4 atual")  
        print("3. Consultar meu IPv6 atual")
        print("4. Testar IPv6 de exemplo")
        print("5. Sair")
        
        opcao = input("\nEscolha uma opção (1-5): ").strip()
        
        if opcao == '1':
            ip = input("\nDigite o IP (IPv4 ou IPv6): ").strip()
            if not validar_ip(ip):
                print("❌ IP inválido!")
                continue
            print(f"\n🔍 Consultando IP: {ip}...")
            
        elif opcao == '2':
            try:
                ip = requests.get('https://api.ipify.org', timeout=5).text
                print(f"\n🔍 Consultando seu IPv4: {ip}...")
            except:
                print("❌ Erro ao obter IPv4.")
                continue
                
        elif opcao == '3':
            ip = obter_ipv6_publico()
            if ip:
                print(f"\n🔍 Consultando seu IPv6: {ip}...")
            else:
                print("❌ IPv6 não disponível ou não detectado.")
                continue
                
        elif opcao == '4':
            # IPv6 de exemplo para teste
            ipv6_exemplos = [
                "2001:4860:4860::8888",
                "2606:4700:4700::1111", 
                "2a00:1450:4007:816::200e"
            ]
            print("\n🌐 IPv6 de exemplo:")
            for i, ip_ex in enumerate(ipv6_exemplos, 1):
                print(f"{i}. {ip_ex}")
            escolha = input("\nEscolha um (1-3): ").strip()
            if escolha in ['1', '2', '3']:
                ip = ipv6_exemplos[int(escolha)-1]
                print(f"\n🔍 Consultando IPv6 de teste: {ip}...")
            else:
                print("❌ Opção inválida!")
                continue
                
        elif opcao == '5':
            print("👋 Saindo...")
            break
            
        else:
            print("❌ Opção inválida!")
            continue
        
        # Obtém as informações
        dados = obter_informacoes_ip(ip)
        exibir_informacoes(dados)
        
        # Opção do mapa
        if dados and dados.get('lat') and dados.get('lon'):
            ver_mapa = input("\n🗺️  Ver no mapa? (s/n): ").lower()
            if ver_mapa == 's':
                mapa_url = f"https://maps.google.com/?q={dados['lat']},{dados['lon']}"
                print(f"🌍 Abra: {mapa_url}")
        
        input("\n⏎ Pressione Enter para continuar...")

if __name__ == "__main__":
    main()
